import os
import random
import numpy as np
import torch
from torch_geometric.data import Batch
import logging
import dgl

all_for_assign = np.array([
[3.854415274463007246e-01,0.000000000000000000e+00,0.000000000000000000e+00,1.000000000000000000e+00,3.333333333333333703e-01,3.701467387488588390e-01,1.843457636052180382e-01],
[2.684964200477326091e-01,3.333333333333333148e-01,0.000000000000000000e+00,1.000000000000000000e+00,3.333333333333333703e-01,3.701467387488588390e-01,1.843457636052180382e-01],
[0.000000000000000000e+00,6.666666666666666297e-01,5.000000000000000000e-01,1.000000000000000000e+00,3.333333333333333703e-01,2.103840483044302490e-01,6.758466201080510771e-01],
[5.369928400954654402e-02,6.666666666666666297e-01,5.000000000000000000e-01,1.000000000000000000e+00,3.333333333333333703e-01,3.473285122516323042e-01,6.758466201080510771e-01],
[3.233890214797136564e-01,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,8.310398090289965456e-01,1.843457636052180382e-01],
[3.818615751789976032e-01,3.333333333333333148e-01,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,2.653935266446673658e-01,1.843457636052180382e-01],
[5.608591885441527314e-01,1.000000000000000000e+00,1.000000000000000000e+00,1.000000000000000000e+00,3.333333333333333703e-01,3.827845257319384409e-01,5.622611674792461489e-01],
[3.782816229116945927e-01,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,7.620234501158462681e-01,1.843457636052181492e-01],
[8.138424821002385734e-01,1.000000000000000000e+00,1.000000000000000000e+00,1.000000000000000000e+00,3.333333333333333703e-01,4.400758267218984887e-01,5.272104361575966625e-01],
[3.830548926014320510e-01,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,7.620234501158462681e-01,1.843457636052181492e-01],
[3.544152744630071905e-01,0.000000000000000000e+00,0.000000000000000000e+00,1.000000000000000000e+00,0.000000000000000000e+00,6.591659060591167352e-01,1.843457636052180382e-01],
[3.150357995226730767e-01,3.333333333333333148e-01,0.000000000000000000e+00,1.000000000000000000e+00,3.333333333333333703e-01,0.000000000000000000e+00,7.521412570826193633e-01],
[4.212410501193317169e-01,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,5.438812048023590195e-01,0.000000000000000000e+00],
[3.436754176610978262e-01,3.333333333333333148e-01,0.000000000000000000e+00,1.000000000000000000e+00,3.333333333333333703e-01,1.369444639472022773e-01,7.521412570826193633e-01],
[1.000000000000000000e+00,1.000000000000000000e+00,1.000000000000000000e+00,1.000000000000000000e+00,9.999999999999998890e-01,1.361616232535282078e-01,1.000000000000000000e+00],
[3.472553699284009476e-01,3.333333333333333148e-01,0.000000000000000000e+00,1.000000000000000000e+00,3.333333333333333703e-01,4.103770273116591483e-02,4.509157991830281542e-01],
[3.424821002386633784e-01,3.333333333333333148e-01,0.000000000000000000e+00,1.000000000000000000e+00,3.333333333333333703e-01,1.774204872568978519e-01,4.509157991830281542e-01],
[3.806682577565632664e-01,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,6.250789861686442128e-01,1.843457636052181492e-01],
[3.723150357995225757e-01,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,3.333333333333333703e-01,9.999999999999998890e-01,3.924100672025299108e-01],
[3.448687350835322740e-01,3.333333333333333148e-01,0.000000000000000000e+00,1.000000000000000000e+00,3.333333333333333703e-01,7.276907954784807009e-01,4.509157991830281542e-01],
]) # FORM MAPE-PPI

def match_feature_with_key(x, all_for_assign=all_for_assign):
    key_dict = {
        'A': all_for_assign[0, :],  # ALA
        'C': all_for_assign[1, :],  # CYS
        'D': all_for_assign[2, :],  # ASP
        'E': all_for_assign[3, :],  # GLU
        'F': all_for_assign[4, :],  # PHE
        'G': all_for_assign[5, :],  # GLY
        'H': all_for_assign[6, :],  # HIS
        'I': all_for_assign[7, :],  # ILE
        'K': all_for_assign[8, :],  # LYS
        'L': all_for_assign[9, :],  # LEU
        'M': all_for_assign[10, :], # MET
        'N': all_for_assign[11, :], # ASN
        'P': all_for_assign[12, :], # PRO
        'Q': all_for_assign[13, :], # GLN
        'R': all_for_assign[14, :], # ARG
        'S': all_for_assign[15, :], # SER
        'T': all_for_assign[16, :], # THR
        'V': all_for_assign[17, :], # VAL
        'W': all_for_assign[18, :], # TRP
        'Y': all_for_assign[19, :], # TYR
    }
    
    x_p = np.zeros((len(x), 7))
    
    for j in range(len(x)):
        x_p[j] = key_dict[x[j]]
        
    return x_p



def set_seed(seed=1000):
    os.environ["PYTHONHASHSEED"] = str(seed)
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    if torch.cuda.is_available():
        torch.backends.cudnn.deterministic = True
        torch.backends.cudnn.benchmark = False


def graph_collate_func(batch):
    d, p, y = zip(*batch)
    d = Batch.from_data_list(d)
    p = dgl.batch(p)
    y = torch.tensor(y, dtype=torch.float32)
    return d, p, y


def mkdir(path):
    path = path.strip()
    path = path.rstrip("\\")
    is_exists = os.path.exists(path)
    if not is_exists:
        os.makedirs(path)

def _normalize(tensor, dim=-1):
    '''
    Normalizes a `torch.Tensor` along dimension `dim` without `nan`s.
    '''
    return torch.nan_to_num(
        torch.div(tensor, torch.norm(tensor, dim=dim, keepdim=True)))


def _rbf(D, D_min=0., D_max=20., D_count=16, device='cpu'):
    '''
    Returns an RBF embedding of `torch.Tensor` `D` along a new axis=-1.
    That is, if `D` has shape [...dims], then the returned tensor will have
    shape [...dims, D_count].
    '''
    D_mu = torch.linspace(D_min, D_max, D_count, device=device)
    D_mu = D_mu.view([1, -1])
    D_sigma = (D_max - D_min) / D_count
    D_expand = torch.unsqueeze(D, -1)

    RBF = torch.exp(-((D_expand - D_mu) / D_sigma) ** 2)
    return RBF

import datetime 
def print_with_time(*arg,**args):
    print(datetime.datetime.now().strftime("[%Y-%m-%d %H:%M:%S]"), *arg,**args)